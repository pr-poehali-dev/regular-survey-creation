import React, { useState, useEffect } from 'react';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import Icon from '@/components/ui/icon';
import { useToast } from '@/hooks/use-toast';

interface TelegramVerificationStepProps {
  phoneNumber: string;
  onVerificationSuccess: () => void;
  onSkip: () => void;
}

const TelegramVerificationStep: React.FC<TelegramVerificationStepProps> = ({ 
  phoneNumber, 
  onVerificationSuccess, 
  onSkip 
}) => {
  const [verificationCode, setVerificationCode] = useState('');
  const [isCheckingTelegram, setIsCheckingTelegram] = useState(true);
  const [hasTelegram, setHasTelegram] = useState(false);
  const [isSendingCode, setIsSendingCode] = useState(false);
  const [isVerifying, setIsVerifying] = useState(false);
  const [codeTimer, setCodeTimer] = useState(0);
  const [codeSent, setCodeSent] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    checkTelegramAvailability();
  }, []);

  useEffect(() => {
    if (codeTimer > 0) {
      const timer = setTimeout(() => setCodeTimer(prev => prev - 1), 1000);
      return () => clearTimeout(timer);
    }
  }, [codeTimer]);

  const checkTelegramAvailability = async () => {
    setIsCheckingTelegram(true);
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è Telegram —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    // –°–ª—É—á–∞–π–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ API –∑–∞–ø—Ä–æ—Å)
    const telegramExists = Math.random() > 0.3;
    setHasTelegram(telegramExists);
    setIsCheckingTelegram(false);

    if (telegramExists) {
      toast({
        title: "Telegram –Ω–∞–π–¥–µ–Ω! üì±",
        description: "–ú—ã –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –≤–∞—à Telegram",
      });
    }
  };

  const sendTelegramCode = async () => {
    setIsSendingCode(true);
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –≤ Telegram
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    setIsSendingCode(false);
    setCodeSent(true);
    setCodeTimer(60);
    
    toast({
      title: "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! üì®",
      description: `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –Ω–∞ –Ω–æ–º–µ—Ä–µ ${phoneNumber}`,
    });
  };

  const verifyCode = async () => {
    setIsVerifying(true);
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    setIsVerifying(false);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ API –∑–∞–ø—Ä–æ—Å)
    if (verificationCode === '1234') {
      toast({
        title: "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! ‚úÖ",
        description: "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ Telegram",
      });
      onVerificationSuccess();
    } else {
      toast({
        title: "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ ‚ùå",
        description: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥",
        variant: "destructive"
      });
    }
  };

  if (isCheckingTelegram) {
    return (
      <div className="text-center space-y-4 py-8 animate-fade-in">
        <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto">
          <div className="w-6 h-6 border-2 border-blue-600 border-t-transparent rounded-full animate-spin"></div>
        </div>
        <h3 className="text-lg font-bold text-gray-800">–ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram</h3>
        <p className="text-gray-600">–ò—â–µ–º –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ –Ω–æ–º–µ—Ä—É {phoneNumber}</p>
      </div>
    );
  }

  if (!hasTelegram) {
    return (
      <div className="text-center space-y-6 py-8 animate-fade-in">
        <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto">
          <Icon name="MessageCircle" size={32} className="text-gray-400" />
        </div>
        <div className="space-y-2">
          <h3 className="text-lg font-bold text-gray-800">Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω</h3>
          <p className="text-gray-600">
            –ù–∞ –Ω–æ–º–µ—Ä–µ {phoneNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–∫–∫–∞—É–Ω—Ç Telegram
          </p>
        </div>
        
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
          <div className="flex items-start gap-3">
            <Icon name="Info" size={20} className="text-yellow-600 mt-0.5" />
            <div className="text-sm text-yellow-800">
              <p className="font-semibold mb-1">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è</p>
              <p>–î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç Telegram –∏ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä</p>
            </div>
          </div>
        </div>

        <Button
          onClick={onSkip}
          className="w-full bg-blue-600 hover:bg-blue-700 text-white py-3"
        >
          –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ Telegram
        </Button>
      </div>
    );
  }

  return (
    <div className="space-y-6 animate-fade-in">
      <div className="text-center mb-6">
        <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <Icon name="MessageCircle" size={32} className="text-blue-600" />
        </div>
        <h3 className="text-lg font-bold text-gray-800">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram</h3>
        <p className="text-gray-600 text-sm">
          –û—Ç–ø—Ä–∞–≤–∏–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –≤–∞—à Telegram {phoneNumber}
        </p>
      </div>

      {!codeSent ? (
        <div className="space-y-4">
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <div className="flex items-start gap-3">
              <Icon name="Shield" size={20} className="text-blue-600 mt-0.5" />
              <div className="text-sm text-blue-800">
                <p className="font-semibold mb-1">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞</p>
                <p>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±–µ—Å–ø–µ—á–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏</p>
              </div>
            </div>
          </div>

          <Button
            onClick={sendTelegramCode}
            disabled={isSendingCode}
            className="w-full bg-blue-600 hover:bg-blue-700 disabled:opacity-50 text-white py-3"
          >
            {isSendingCode ? (
              <div className="flex items-center gap-2">
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥...
              </div>
            ) : (
              <div className="flex items-center justify-center gap-2">
                <Icon name="Send" size={16} />
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –≤ Telegram
              </div>
            )}
          </Button>

          <Button
            onClick={onSkip}
            variant="outline"
            className="w-full border-gray-300 text-gray-700 hover:bg-gray-50"
          >
            –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
          </Button>
        </div>
      ) : (
        <div className="space-y-4">
          <div className="space-y-2">
            <Label className="text-sm font-semibold text-gray-700">
              –ö–æ–¥ –∏–∑ Telegram *
            </Label>
            <Input
              type="text"
              value={verificationCode}
              onChange={(e) => setVerificationCode(e.target.value.replace(/\D/g, '').substring(0, 4))}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors text-center text-lg font-mono"
              placeholder="1234"
              maxLength={4}
              required
            />
            <p className="text-xs text-gray-500 text-center">
              –í–≤–µ–¥–∏—Ç–µ 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
            </p>
          </div>

          <Button
            onClick={verifyCode}
            disabled={verificationCode.length !== 4 || isVerifying}
            className="w-full bg-green-600 hover:bg-green-700 disabled:opacity-50 text-white py-3"
          >
            {isVerifying ? (
              <div className="flex items-center gap-2">
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥...
              </div>
            ) : (
              <div className="flex items-center justify-center gap-2">
                <Icon name="CheckCircle" size={16} />
                –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–¥
              </div>
            )}
          </Button>

          <div className="flex justify-between items-center">
            {codeTimer > 0 ? (
              <p className="text-sm text-gray-500">
                –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ {codeTimer} —Å–µ–∫
              </p>
            ) : (
              <Button
                onClick={sendTelegramCode}
                variant="outline"
                size="sm"
                disabled={isSendingCode}
                className="text-blue-600 border-blue-600 hover:bg-blue-50"
              >
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ
              </Button>
            )}
            
            <Button
              onClick={onSkip}
              variant="ghost"
              size="sm"
              className="text-gray-500 hover:text-gray-700"
            >
              –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
            </Button>
          </div>
        </div>
      )}
    </div>
  );
};

export default TelegramVerificationStep;