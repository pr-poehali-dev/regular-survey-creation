import React, { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import Icon from '@/components/ui/icon';

interface Message {
  id: string;
  text: string;
  sender: 'user' | 'bot';
  timestamp: Date;
}

const ChatAssistant: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–∞–π–º–∞–º. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π:',
      sender: 'bot',
      timestamp: new Date()
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [showQuickQuestions, setShowQuickQuestions] = useState(true);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const quickQuestions = [
    'üí∞ –ö–∞–∫–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞?',
    '‚è∞ –ö–∞–∫–∏–µ —Å—Ä–æ–∫–∏ –∑–∞–π–º–∞?',
    'üí∏ –ö–∞–∫–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞?',
    'üìÑ –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã?',
    '‚ö° –ö–∞–∫ –±—ã—Å—Ç—Ä–æ –æ–¥–æ–±—Ä—è—é—Ç –∑–∞—è–≤–∫—É?',
    'üí≥ –ö–∞–∫ –≤–µ—Ä–Ω—É—Ç—å –∑–∞–π–º?',
    'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏'
  ];

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const getBotResponse = (userMessage: string): string => {
    const message = userMessage.toLowerCase();
    
    if (message.includes('–ø—Ä–æ—Ü–µ–Ω—Ç') || message.includes('—Å—Ç–∞–≤–∫–∞')) {
      return '–ù–∞—à–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 1% –≤ –¥–µ–Ω—å. –≠—Ç–æ –æ–¥–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö –≤—ã–≥–æ–¥–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –Ω–∞ —Ä—ã–Ω–∫–µ –º–∏–∫—Ä–æ–∑–∞–π–º–æ–≤!';
    }
    
    if (message.includes('—Å—Ä–æ–∫') || message.includes('–ø–µ—Ä–∏–æ–¥')) {
      return '–í—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –∑–∞–π–º –Ω–∞ —Å—Ä–æ–∫ –æ—Ç 7 –¥–æ 365 –¥–Ω–µ–π. –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å –ø–µ—Ä–∏–æ–¥ –ø–æ–≥–∞—à–µ–Ω–∏—è!';
    }
    
    if (message.includes('—Å—É–º–º–∞') || message.includes('—Ä–∞–∑–º–µ—Ä')) {
      return '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–π–º–∞ - 5 000 ‚ÇΩ, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è - 500 000 ‚ÇΩ. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ!';
    }
    
    if (message.includes('–¥–æ–∫—É–º–µ–Ω—Ç') || message.includes('–ø–∞—Å–ø–æ—Ä—Ç')) {
      return '–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–π–º–∞ –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ø–∞—Å–ø–æ—Ä—Ç –†–§. –ù–∏–∫–∞–∫–∏—Ö —Å–ø—Ä–∞–≤–æ–∫ –æ –¥–æ—Ö–æ–¥–∞—Ö –∏ –ø–æ—Ä—É—á–∏—Ç–µ–ª–µ–π!';
    }
    
    if (message.includes('–æ–¥–æ–±—Ä–µ–Ω–∏–µ') || message.includes('—Ä–µ—à–µ–Ω–∏–µ')) {
      return '–†–µ—à–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ! –î–µ–Ω—å–≥–∏ –ø–æ—Å—Ç—É–ø–∞—é—Ç –Ω–∞ –∫–∞—Ä—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.';
    }
    
    if (message.includes('–≤–æ–∑–≤—Ä–∞—Ç') || message.includes('–ø–æ–≥–∞—à–µ–Ω–∏–µ')) {
      return '–í–µ—Ä–Ω—É—Ç—å –∑–∞–π–º –º–æ–∂–Ω–æ –¥–æ—Å—Ä–æ—á–Ω–æ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π –∏–ª–∏ –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ä–æ–∫. –°–ø–æ—Å–æ–±—ã –ø–æ–≥–∞—à–µ–Ω–∏—è: —á–µ—Ä–µ–∑ —Å–∞–π—Ç, –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –∏–ª–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞—Ö.';
    }
    
    if (message.includes('–ø—Ä–∏–≤–µ—Ç') || message.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π')) {
      return '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –æ –∑–∞–π–º–∞—Ö. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?';
    }
    
    if (message.includes('–∫–æ–Ω—Ç–∞–∫—Ç') || message.includes('–ø–æ–¥–¥–µ—Ä–∂–∫') || message.includes('—Ç–µ–ª–µ—Ñ–æ–Ω')) {
      return '–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ:\nüìû 8-800-555-0123 (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)\nüìß support@zaim.ru\nüí¨ –û–Ω–ª–∞–π–Ω-—á–∞—Ç –Ω–∞ —Å–∞–π—Ç–µ';
    }
    
    return '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º —Å–µ—Ä–≤–∏—Å–∞. –ï—Å–ª–∏ —É –≤–∞—Å —Å—Ä–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É 8-800-555-0123.';
  };

  const handleSendMessage = async (messageText?: string) => {
    const textToSend = messageText || inputValue;
    if (!textToSend.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: textToSend,
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsTyping(true);
    setShowQuickQuestions(false);

    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
    setTimeout(() => {
      const botResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: getBotResponse(textToSend),
        sender: 'bot',
        timestamp: new Date()
      };
      
      setMessages(prev => [...prev, botResponse]);
      setIsTyping(false);
    }, 1000 + Math.random() * 1000);
  };

  const handleQuickQuestion = (question: string) => {
    const cleanQuestion = question.replace(/^[üí∞‚è∞üí∏üìÑ‚ö°üí≥üìû]\s/, '');
    handleSendMessage(cleanQuestion);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <>
      {/* –ü–ª–∞–≤–∞—é—â–∞—è –∫–Ω–æ–ø–∫–∞ —á–∞—Ç–∞ */}
      <div className="fixed left-6 bottom-6 z-50">
        <Button
          onClick={() => setIsOpen(!isOpen)}
          className={`w-14 h-14 rounded-full shadow-lg transition-all duration-300 transform hover:scale-110 ${
            isOpen 
              ? 'bg-red-500 hover:bg-red-600' 
              : 'bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700'
          }`}
        >
          <Icon 
            name={isOpen ? "X" : "MessageCircle"} 
            size={24} 
            className="text-white"
          />
        </Button>
      </div>

      {/* –ü–∞–Ω–µ–ª—å —á–∞—Ç–∞ */}
      <div className={`fixed left-0 top-0 h-full w-96 bg-white shadow-2xl transform transition-transform duration-300 z-40 ${
        isOpen ? 'translate-x-0' : '-translate-x-full'
      }`}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ */}
        <div className="bg-gradient-to-r from-blue-500 to-purple-600 text-white p-4 flex items-center gap-3">
          <div className="w-10 h-10 bg-white/20 rounded-full flex items-center justify-center">
            <Icon name="Bot" size={20} />
          </div>
          <div>
            <h3 className="font-bold">–ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–∞–π–º–∞–º</h3>
            <p className="text-sm opacity-90">–û–Ω–ª–∞–π–Ω ‚Ä¢ –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å</p>
          </div>
        </div>

        {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
        <div className="flex-1 overflow-y-auto p-4 h-[calc(100vh-140px)] space-y-4">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div
                className={`max-w-[80%] rounded-2xl px-4 py-2 ${
                  message.sender === 'user'
                    ? 'bg-blue-500 text-white ml-4'
                    : 'bg-gray-100 text-gray-800 mr-4'
                }`}
              >
                <p className="text-sm">{message.text}</p>
                <p className={`text-xs mt-1 ${
                  message.sender === 'user' ? 'text-blue-100' : 'text-gray-500'
                }`}>
                  {message.timestamp.toLocaleTimeString('ru-RU', { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                  })}
                </p>
              </div>
            </div>
          ))}
          
          {/* –ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã */}
          {showQuickQuestions && messages.length === 1 && (
            <div className="space-y-2">
              <p className="text-xs text-gray-500 text-center">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</p>
              <div className="grid grid-cols-1 gap-2">
                {quickQuestions.map((question, index) => (
                  <button
                    key={index}
                    onClick={() => handleQuickQuestion(question)}
                    className="text-left p-3 bg-blue-50 hover:bg-blue-100 rounded-xl border border-blue-200 transition-colors duration-200 text-sm text-gray-700 hover:text-blue-700"
                  >
                    {question}
                  </button>
                ))}
              </div>
            </div>
          )}
          
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ */}
          {isTyping && (
            <div className="flex justify-start">
              <div className="bg-gray-100 rounded-2xl px-4 py-2 mr-4">
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                </div>
              </div>
            </div>
          )}
          
          <div ref={messagesEndRef} />
        </div>

        {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
        <div className="p-4 border-t bg-gray-50">
          <div className="flex gap-2">
            <Input
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å..."
              className="flex-1 rounded-xl border-2 focus:border-blue-500"
              disabled={isTyping}
            />
            <Button
              onClick={() => handleSendMessage()}
              disabled={!inputValue.trim() || isTyping}
              className="px-4 py-2 rounded-xl bg-blue-500 hover:bg-blue-600 transition-colors"
            >
              <Icon name="Send" size={18} />
            </Button>
          </div>
        </div>
      </div>

      {/* –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–∞ */}
      {isOpen && (
        <div 
          className="fixed inset-0 bg-black/20 z-30 backdrop-blur-sm"
          onClick={() => setIsOpen(false)}
        />
      )}
    </>
  );
};

export default ChatAssistant;